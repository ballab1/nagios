#!/bin/bash
#

declare -r PROGNAME="${BASH_SOURCE[0]}"
declare -r VERSION=1.0.0'

Getopt::Long::Configure('bundling');
GetOptions
    ("v"   => \$verbose, "verbose"    => \$verbose,
     "V"   => \$opt_V, "version"    => \$opt_V,
     "h"   => \$opt_h, "help"       => \$opt_h,
     "w=s" => \$opt_w, "warning=s"  => \$opt_w,
     "c=s" => \$opt_c, "critical=s" => \$opt_c,
     "H=s" => \$opt_H, "hostname=s" => \$opt_H,
     "a=s" => \$opt_a, "address=s" => \$opt_a);

if ($opt_V) {
    print_revision("$PROGNAME", "$VERSION"); #'
    exit $ERRORS{'OK'};
}

if ($opt_h) {print_help(); exit $ERRORS{'OK'};}

my $smbclient = $utils::PATH_TO_SMBCLIENT;
$smbclient    || usage("check requires smbclient, smbclient not set\n");
-x $smbclient || usage("check requires smbclient, $smbclient: $!\n");

if ($DEBUG) {
    open (LOG, '>>', '/var/log/check_disk_smb.log');
    print LOG "\n====================================================================\n";
    print LOG join("\n",@ARGV)."\n";
}

# Options checking

($opt_H) || ($opt_H = shift @ARGV) || usage("Host name not specified\n");
my $host = $1 if ($opt_H =~ /^([-_.A-Za-z0-9 ]+\$?)$/);
($host) || usage("Invalid host: $opt_H\n");

($opt_s) || ($opt_s = shift @ARGV) || usage("Share volume not specified\n");
my $share = $1 if ($opt_s =~ /^([-_.A-Za-z0-9 ]+\$?)$/);
($share) || usage("Invalid share: $opt_s\n");

my ($auth_file, $user, $pass);
if (defined($opt_A)) {
   $auth_file = $1 if ($opt_A =~ /(.*)/);
}
if (defined($opt_u)) {
   $user = 'guest';
   $user = $1 if ($opt_u =~ /^([-_.A-Za-z0-9\\]*)$/);
}
if (defined($opt_p)) {
   $pass = '';
   $pass = $1 if ($opt_p =~ /(.*)/);
}
defined($user) || defined($auth_file) || usage("Invalid credentials: $opt_A $opt_u\n");

($opt_w) || ($opt_w = shift @ARGV) || ($opt_w = 85);
my $warn = $1 if ($opt_w =~ /^([0-9]{1,2}\%?|100\%?|[0-9]+[kMG])$/);
($warn) || usage("Invalid warning threshold: $opt_w\n");

($opt_c) || ($opt_c = shift @ARGV) || ($opt_c = 95);
my $crit = $1 if ($opt_c =~ /^([0-9]{1,2}\%?|100\%?|[0-9]+[kMG])$/);
($crit) || usage("Invalid critical threshold: $opt_c\n");


# split the type from the unit value
#Check $warn and $crit for type (%/M/G) and set up for tests
#P = Percent, K = KBytes
my $warn_type;
my $crit_type;

if ($opt_w =~ /^([0-9]+)\%?$/) {
    $warn = "$1";
    $warn_type = "P";
} elsif ($opt_w =~ /^([0-9]+)k$/) {
    $warn_type = "K";
    $warn = $1;
} elsif ($opt_w =~ /^([0-9]+)M$/) {
    $warn_type = "K";
    $warn = $1 * 1024;
} elsif ($opt_w =~ /^([0-9]+)G$/) {
    $warn_type = "K";
    $warn = $1 * 1048576;
}
if ($opt_c =~ /^([0-9]+)\%?$/) {
    $crit = "$1";
    $crit_type = "P";
} elsif ($opt_c =~ /^([0-9]+)k$/) {
    $crit_type = "K";
    $crit = $1;
} elsif ($opt_c =~ /^([0-9]+)M$/) {
    $crit_type = "K";
    $crit = $1 * 1024;
} elsif ($opt_c =~ /^([0-9]+)G$/) {
    $crit_type = "K";
    $crit = $1 * 1048576;
}

# check if both warning and critical are percentage or size
unless( ( $warn_type eq "P" && $crit_type eq "P" ) || ( $warn_type ne "P" && $crit_type ne "P" ) ){
    $opt_w =~ s/\%/\%\%/g;
    $opt_c =~ s/\%/\%\%/g;
    usage("Both warning and critical should be same type- warning: $opt_w critical: $opt_c \n");
}

# verify warning is less than critical
if ( $warn_type eq "K") {
    unless ( $warn > $crit) {
        usage("Disk size: warning ($opt_w) should be greater than critical ($opt_c) \n");
    }
}
else {
    unless ( $warn < $crit) {
        $opt_w =~ s/\%/\%\%/g;
        $opt_c =~ s/\%/\%\%/g;
        usage("Percentage: warning ($opt_w) should be less than critical ($opt_c) \n");
    }
}

my $address = undef;
$address = $1 if (defined($opt_a) && $opt_a =~ /(.*)/);

# end of options checking


my $state = "OK";
my $answer = undef;
my $res = undef;
my $perfdata = "";
my @lines = undef;

# Execute a "du" on the share using smbclient program
# get the results into $res
my @cmd = (
    $smbclient,
    "//$host/$share",
    defined($auth_file) ? ("-A", "$auth_file") : (),
    defined($user) ? ("-U", "$user%$pass") : (),
    defined($workgroup) ? ("-W", $workgroup) : (),
    defined($address) ? ("-I", $address) : (),
    defined($opt_P) ? ("-p", $opt_P) : (),
    "-d", "2",
    "-c", "du"
);

if ($DEBUG) {
    print LOG "\n====================================================================\n";
    print LOG "host: $host, " if defined($host);
    print LOG "share: $share, " if defined($share);
    print LOG "user: $user, pass: $pass, " if defined($user);
        print LOG "auth_file: $auth_file, " if defined($auth_file);
        print LOG "warn: $warn, " if defined($warn);
        print LOG "crit: $crit, " if defined($crit);
        print LOG "workgroup: $workgroup, " if defined($workgroup);
        print LOG "address: $address, " if defined($address);
        print LOG "warn_type: $warn_type, " if defined($warn_type);
        print LOG "crit_type: $crit_type, " if defined($crit_type);
    print LOG "\n\n----------------------\n".join(' ',@cmd)."\n";
}


# Just in case of problems, let's not hang Nagios
$SIG{'ALRM'} = sub { 
    print "No Answer from Client\n";
    exit $ERRORS{"UNKNOWN"};
};

print join(" ", @cmd) . "\n" if ($verbose);
alarm($TIMEOUT);

$res = output_and_error_of(@cmd) or exit $ERRORS{"UNKNOWN"};

#Turn off alarm
alarm(0);
print LOG "\n----------------------\n".$res."\n"  if ($DEBUG);

#Split $res into an array of lines
@lines = split /\n/, $res;

#Get the last line into $_
$_ = $lines[$#lines-1];
#print "$_\n";

$answer = "Result from smbclient not suitable";
$state = "UNKNOWN";

foreach (@lines) {
    my @result = parse_line($_);
    if ($result[0] == TRUE) {
        $perfdata = $result[1];
        $state = $result[2];
        $answer = $result[3];
        last;
    }
}

print LOG "answer: $answer, perfdata: $perfdata, state: $state \n"  if ($DEBUG);

print $answer;
print " | " . $perfdata if ($perfdata);
print "\n";
print "$state\n" if ($verbose);
exit $ERRORS{$state};

##################################################################################


# Execute the given command line and return anything it writes to STDOUT and/or
# STDERR.  (This might be useful for other plugins, too, so it should possibly
# be moved to utils.pm.)
sub output_and_error_of (@) {
    local *CMD;
    local $/ = undef;
    my $pid = open CMD, "-|";
    if (defined($pid)) {
        if ($pid) {
            return <CMD>;
        } else {
            open STDERR, ">&STDOUT" and exec @_;
            exit(1);
        }
    }
    return undef;
}

#Process the last line to get free space.  
#If line does not match required regexp, return an UNKNOWN error
sub parse_line ($) {
    my $line = shift;
    
    if (/(Access denied|NT_STATUS_LOGON_FAILURE|NT_STATUS_ACCESS_DENIED)/) {
        return (TRUE, "", "CRITICAL", "Access Denied");
    }
    
    if (/(Unknown host \w*|Connection.*failed)/) {
        return (TRUE, "", "CRITICAL", "$1");
    }
    
    if (/(ERROR:.*)/) {
        return (TRUE, "", "CRITICAL", "$1");
    }
    
    if (/(You specified an invalid share name|NT_STATUS_BAD_NETWORK_NAME)/) {
        return (TRUE, "", "CRITICAL", "Invalid share name \\\\$host\\$share");
    }
    
    if (/\s*(\d*) blocks of size (\d*)\. (\d*) blocks available/) {

        my ($avail_bytes) = $3 * $2;
        my ($total_bytes) = $1 * $2;
        my ($occupied_bytes) = $1 * $2 - $avail_bytes;
        my ($avail) = $avail_bytes/1024;
        my ($capper) = int(($3/$1)*100);
        my ($mountpt) = "\\\\\\\\$host\\\\$share";

        # TODO : why is the kB the standard unit for args ?
        my ($warn_bytes) = $total_bytes - $warn * 1024;
        if ($warn_type eq "P") {
            $warn_bytes = $warn * $1 * $2 / 100;
        }
        my ($crit_bytes) = $total_bytes - $crit * 1024;
        if ($crit_type eq "P") {
            $crit_bytes = $crit * $1 * $2 / 100;
        }


        if (int($avail / 1024) > 0) {
            $avail = int($avail / 1024);
            if (int($avail /1024) > 0) {
                $avail = (int(($avail / 1024)*100))/100;
                $avail = $avail ."G";
            } else {
                $avail = $avail ."M";
            }
        } else {
            $avail = $avail ."K";
        }

        #print ":$warn:$warn_type:\n";
        #print ":$crit:$crit_type:\n";
        #print ":$avail:$avail_bytes:$capper:$mountpt:\n";

        my $sesc = $share;
        $sesc =~ s|\\|\\\\|g;
        my $perfdata = "'" . $sesc . "'=" . $occupied_bytes . 'B;'
            . $warn_bytes . ';'
            . $crit_bytes . ';'
            . '0;'
            . $total_bytes;

        if ($occupied_bytes > $crit_bytes) {
            return (TRUE, $perfdata, "CRITICAL", "CRITICAL: Only $avail ($capper%) free on $mountpt");
        }
        
        if ( $occupied_bytes > $warn_bytes ) {
            return (TRUE, $perfdata, "WARNING", "WARNING: Only $avail ($capper%) free on $mountpt");
        }
        
        return (TRUE, $perfdata, "OK", "Disk ok - $avail ($capper%) free on $mountpt");
        
    }
    return (FALSE, "OK", undef, undef, undef);
}

sub print_usage () {
    print "Usage: $PROGNAME -H <host> -s <share> -u <user> -p <password> 
      -w <warn> -c <crit> [-W <workgroup>] [-P <port>] [-a <IP>]\n";
}

sub print_help () {
    printf $PROGNAME;
    print "Copyright (c) 2020 Bob Ballantyne

Perl Check plugin for Nagios

";
    print_usage();
    print "
-H, --hostname=HOST
   name or IP of the server
-u, --user=STRING
   Username to log in to server. (Defaults to \"guest\")
-p, --password=STRING
   Password to log in to server. (Defaults to an empty password)

-w, --warning=INTEGER or INTEGER[kMG]
   Percent of used space at which a warning will be generated (Default: 85%)     
-c, --critical=INTEGER or INTEGER[kMG]
   Percent of used space at which a critical will be generated (Defaults: 95%)
   
";
    support();
}
