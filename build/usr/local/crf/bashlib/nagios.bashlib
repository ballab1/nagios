#!/bin/sh

function nagios.deployLocal()
{
    local -r NAGIOS_HOME=${NAGIOS_HOME:-/usr/local/nagios}
    local -r WWW="${WWW:-${NAGIOS_HOME}/share}"
    local -r NCONF_HOME="${NCONF_HOME:-${WWW}/nconf}"

    local -r TEMP_DIR="${NCONF_HOME}/temp"
    [ -e "${TEMP_DIR}" ] || mkdir -p "${TEMP_DIR}"
    local -r tmpArchive="${TEMP_DIR}/NagiosConfig.tgz"

    local -r OUTPUT_DIR="${NCONF_HOME}/output"
    local -r outArchive="${OUTPUT_DIR}/NagiosConfig.tgz"

    # update nagios config if CONF_ARCHIVE is newer than
    [ ! -e "$outArchive" ] || [ "$outArchive" -nt "$tmpArchive" ] || cp "$outArchive" "$tmpArchive"


    # re-deploy: 'extract' into /usr/local/nagios/etc & 'reload' nagios
    echo removing old config
    rm -rf "${NAGIOS_HOME}/etc/Default_collector"
    rm -rf "${NAGIOS_HOME}/etc/global"
    echo deploying new config
    tar -xzf "$tmpArchive" -C "${NAGIOS_HOME}/etc"

    nagios.gitUpdate

    if [ -e /run/nagios.lock ]; then
        echo restarting 'nagios' service
        supervisorctl restart nagios
    fi
}

function nagios.gitUpdate()
{
    local REPO_DIR=/tmp/config_source_data
    cd "${REPO_DIR}"


    # backup latest changes to DBMS 
    "${NCONF_HOME}/bin/dump_nagios_data.pl"

    
    # check the 'git status' to see if there are any changes  (return SUCCESS on 0-changes)
    local -i numberOfChanges=$(git status --porcelain | grep -c '^ M ')
    echo "number of Changes:      ${numberOfChanges}" 
    if [[ $numberOfChanges -gt 0 ]]; then
        # update our git repo with changes
        git checkout -b "${NAGIOS_BRANCH:-operational/updates/nagios}"
        git add -A
        git commit -m "$(date +"%Y-%m-%d %H:%M:%S") - new backup files" 
        git push -v
    fi
}

function nagios.redeployConfig()
{
    local www_user=${www_user:-"www-data"}
    local www_group=${www_group:-"www-data"}


    local REPO_DIR=/tmp/config_source_data
    [ ! -e "${REPO_DIR}" ] || rm -rf "${REPO_DIR}"
    git clone -v --recursive "https://${NAGIOS_GITHUB_CREDENTIALS}@${NAGIOS_REPO}.git" "${REPO_DIR}"
    chown "${www_user}:${www_group}" -R "${REPO_DIR}"
    cd "${REPO_DIR}"

    # load mysql with new config
    "${NCONF_HOME}/bin/load_nagios_data.pl"


    # generate new config from mysql
    "${NCONF_HOME}/bin/generate_config.pl"


    # re-deploy: 'extract' into /usr/local/nagios/etc & 'reload' nagios
    declare -r outArchive="${NCONF_HOME}/output/NagiosConfig.tgz"
    echo removing old config
    rm -rf "${NAGIOS_HOME}/etc/Default_collector"
    rm -rf "${NAGIOS_HOME}/etc/global"
    echo adding new config
    tar -xzf "$outArchive" -C "${NAGIOS_HOME}/etc" 
    [ ! -e "${NCONF_HOME}/temp/generate.lock" ] || rm "${NCONF_HOME}/temp/generate.lock"
    chown "${www_user}:${www_group}" -R "${NCONF_HOME}/temp"

    # verify config
    nagios -v "${NAGIOS_HOME}/etc/nagios.cfg"

    # run remainder in a backgroud process
    ( nagios.setupStuff & )
}

function nagios.removeOldFiles()
{
    # clean up any old content out on mounted volumes
    [ ! -e /run/nagios.lock ] || rm /run/nagios.lock
    declare -r TEMP_DIR="${NCONF_HOME}/temp"
    [ -e "${TEMP_DIR}" ] || mkdir -p "${TEMP_DIR}"
    declare -r tmpArchive="${TEMP_DIR}/NagiosConfig.tgz"
    [ ! -e "$tmpArchive" ] || rm "$tmpArchive"
    find "${NAGIOS_HOME}/var" ! -user nagios -delete
}

function nagios.setupStuff()
{
    local nagios_user=${nagios_user:-"nagios"}
    local www_group=${www_group:-"www-data"}

    until [ -s /run/nagios.lock ] ; do
        sleep 15
        lib.primaryPid 'nagios' >  /run/nagios.lock 
    done
    until [ -e "${NAGIOS_HOME}/var/rw/nagios.cmd" ] ; do
        sleep 15
    done
    chown "${nagios_user}:${www_group}" -R "${NCONF_HOME}/temp"
    chmod 666 "${NAGIOS_HOME}/var/rw/nagios.cmd"
    echo 'Finished startup tasks'
}

function nagios.setPermissionsOnVolumes()
{
    local www_user=${www_user:-"www-data"}
    local www_group=${www_group:-"www-data"}
    local nagios_user=${nagios_user:-"nagios"}
    local nagios_group=${nagios_group:-"nagios"}

    [ "$(getent passwd "${nagios_user}")" ] || adduser -D -H "${nagios_user}"
    chown "${nagios_user}:${nagios_group}" -R "${NAGIOS_HOME}/var/rrd"
    chown "${nagios_user}:${nagios_group}" -R "${NAGIOS_HOME}/var/archives"


    [ "$(getent passwd www-data)" ] || adduser -D -H "${www_user}"
    chown "${www_user}:${www_group}" -R "${NCONF_HOME}/output"
    chown "${www_user}:${www_group}" -R "${NCONF_HOME}/temp"
    chown "${www_user}:${www_group}" -R /var/log

    chown "${nagios_user}:${www_group}" -R "${NAGIOS_HOME}/var/rw"


    find "${NAGIOS_HOME}/var" -type d -exec chmod 777 '{}' \;
    find "${NAGIOS_HOME}/var" -type f -exec chmod 666 '{}' \;
    find "${NCONF_HOME}/output" -type d -exec chmod 777 '{}' \;
    find "${NCONF_HOME}/output" -type f -exec chmod 666 '{}' \;
    find "/var/log" -type d -exec chmod 777 '{}' \;
    find "/var/log" -type f -exec chmod 666 '{}' \;
}

function nagios.setHtPasswd
{
    sed -i "s|=nagiosadmin|=${NAGIOS_USER}|" "${NAGIOS_HOME}/etc/cgi.cfg"
    rm "${NAGIOS_HOME}/etc/htpasswd.users"
    echo "${NAGIOS_PASS}" | htpasswd -c "${NAGIOS_HOME}/etc/htpasswd.users" "${NAGIOS_USER}"
    chmod 444 "${NAGIOS_HOME}/etc/htpasswd.users"
}
